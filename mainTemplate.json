{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Virtual Machine"
      }
    },
    "vmWindowsOSVersion": {
      "type": "string",
      "defaultValue": "2016-Datacenter",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter",
        "2016-Datacenter"
      ],
      "metadata": {
        "description": "The Windows operating system for the Virtual Machine. This will pick a fully patched image of this given Windows version."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_A2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      }
    },
    "vmAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "vmAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "adJoin": {
      "type": "string",
      "defaultValue": "Join",
      "metadata": {
        "description": "Boolean value for if user wants to join AD"
      }
    },
    "adUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Domain"
      },
      "defaultValue": ""
    },
    "adPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Domain user"
      },
      "defaultValue": ""
    },
    "adServiceAccountName": {
      "type": "string",
      "metadata": {
        "description": "Username for the Service Account for Controllers"
      },
      "defaultValue": ""
    },
    "adServiceAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Service Account for Controllers"
      },
      "defaultValue": ""
    },
    "virtualNetworkNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "metadata": {
        "description": "Determines whether or not a new virtual network should be provisioned."
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "VirtualNetwork",
      "metadata": {
        "description": "Name of the virtual network"
      }
    },
    "addressPrefixes": {
      "type": "array",
      "defaultValue": [
        "10.0.0.0/16"
      ],
      "metadata": {
        "description": "Address prefix of the virtual network"
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "mmSubnet",
      "metadata": {
        "description": "Name of the subnet"
      }
    },
    "subnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "Subnet prefix of the virtual network"
      }
    },
    "virtualNetworkResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of the resource group for the existing virtual network"
      }
    },
    "dnsLabelPrefix": {
      "type": "string",
      "metadata": {
        "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
      }
    },
    "nsgName": {
      "type": "string",
      "metadata": {
        "description": "Name of the network security group"
      }
    },
    "nsgHTTPAccess": {
      "type": "string",
      "metadata": {
        "descirption": "Sets http access to the server"
      },
      "defaultValue": "Allow"
    },
    "nsgRDPAccess": {
      "type": "string",
      "metadata": {
        "descirption": "Sets rdp access to the server"
      },
      "defaultValue": "Allow"
    },
    "nsgMMMCAccess": {
      "type": "string",
      "metadata": {
        "descirption": "Sets mmmc access to the server"
      },
      "defaultValue": "Allow"
    },
    "sqlServerNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix for the name of the SQL Server"
      },
      "defaultValue": "menandmice-azuresql-"
    },
    "sqlServerAdminUsername": {
      "type": "string",
      "minLength": 1
    },
    "sqlServerAdminPassword": {
      "type": "securestring"
    },
    "sqlDatabaseName": {
      "type": "string",
      "minLength": 1
    },
    "sqlDatabaseEdition": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Premium"
      ]
    },
    "storageNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "metadata": {
        "description": "Determines whether or not a new storage account should be provisioned."
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[concat(uniquestring(resourceGroup().id), 'menandmice')]",
      "metadata": {
        "description": "Name of the storage account"
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Storage account type"
      }
    },
    "storageAccountResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of the resource group for the existing storage account"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
      },
      "defaultValue": "[deployment().properties.templateLink.uri]"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
      },
      "defaultValue": ""
    }
  },
  "variables": {
    "nicName": "[concat(parameters('vmName'), '-nic')]",
    "publicIPAddressName": "[concat(parameters('vmName'), '-publicIP')]",
    "virtualNetworkName": "[concat(parameters('vmName'), '-vNet')]",
    "subnetName": "[concat(parameters('vmName'), '-subnet')]",
    "subnetRef": "[resourceId(parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets/', parameters('virtualNetworkName'), parameters('subnetName'))]",
    "scriptFolder": "scripts",
    "mainScript": "mmMain.ps1",
    "installScript": "mmInstall.ps1",
    "keyScript": "mmInstallKeys.ps1",
    "domainJoinScript": "mmDomainJoin.ps1",
    "setDatabaseScript": "mmSetDatabase.ps1",
    "serviceAccountScript": "AddAccountToLogonAsService.ps1",
    "menandmice-azuresqlName": "[concat(parameters('sqlServerNamePrefix'), uniqueString(resourceGroup().id))]",
    "conditionalAdUsername": "[if(equals(parameters('adJoin'), 'Join'), concat(' -domainUsername ', parameters('adUsername')), '')]",
    "conditionalAdPassword": "[if(equals(parameters('adJoin'), 'Join'), concat(' -domainUserPassword ', parameters('adPassword')), '')]",
    "conditionalAdSvcAccount": "[if(equals(parameters('adJoin'), 'Join'), concat(' -svcDomainUsername ', parameters('adServiceAccountName')), '')]",
    "conditionalAdSvcPassword": "[if(equals(parameters('adJoin'), 'Join'), concat(' -svcDomainUserPassword ', parameters('adServiceAccountPassword')), '')]",
    "sqlDatabaseCollation": "SQL_Latin1_General_CP1_CS_AS",
    "sqlDatabaseRequestedService": "[if(equals(parameters('sqlDatabaseEdition'), 'Standard'), 'S1', 'P1')]"
  },
  "resources": [
    {
      "condition": "[equals(parameters('storageNewOrExisting'), 'new')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('storageAccountName')]",
      "apiVersion": "2016-01-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('storageAccountType')]"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsLabelPrefix')]"
        }
      }
    },
    {
      "condition": "[equals(parameters('virtualNetworkNewOrExisting'), 'new')]",
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[parameters('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[parameters('addressPrefixes')]"
        },
        "subnets": [
          {
            "name": "[parameters('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "comments": "Network Security Group",
      "name": "[parameters('nsgName')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2018-02-01",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowHttpAll",
            "properties": {
              "priority": 100,
              "sourceAddressPrefix": "*",
              "protocol": "Tcp",
              "destinationPortRange": "80",
              "access": "[parameters('nsgHTTPAccess')]",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "description": "Allow http traffic to the server"
            }
          },
          {
            "name": "AllowRdpAll",
            "properties": {
              "priority": 200,
              "sourceAddressPrefix": "*",
              "protocol": "Tcp",
              "destinationPortRange": "3389 ",
              "access": "[parameters('nsgRDPAccess')]",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "description": "Allow http traffic to the server"
            }
          },
          {
            "name": "AllowMmmcAll",
            "properties": {
              "priority": 300,
              "sourceAddressPrefix": "*",
              "protocol": "Tcp",
              "destinationPortRange": "1231",
              "access": "[parameters('nsgMMMCAccess')]",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "description": "Allow http traffic to the server"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('vmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_A2"
        },
        "osProfile": {
          "computerName": "[parameters('vmName')]",
          "adminUsername": "[parameters('vmAdminUsername')]",
          "adminPassword": "[parameters('vmAdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[parameters('vmWindowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', parameters('storageAccountName')), '2017-06-01').primaryEndpoints.blob]"
          }
        }
      },
      "resources": [
        {
          "type": "extensions",
          "name": "CustomScriptExtension",
          "apiVersion": "2017-03-30",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[parameters('vmName')]"
          ],
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.8",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(parameters('_artifactsLocation'), '/', variables('scriptFolder'), '/', variables('mainScript'), parameters('_artifactsLocationSasToken'))]",
                "[concat(parameters('_artifactsLocation'), '/', variables('scriptFolder'), '/', variables('installScript'), parameters('_artifactsLocationSasToken'))]",
                "[concat(parameters('_artifactsLocation'), '/', variables('scriptFolder'), '/', variables('keyScript'), parameters('_artifactsLocationSasToken'))]",
                "[concat(parameters('_artifactsLocation'), '/', variables('scriptFolder'), '/', variables('domainJoinScript'), parameters('_artifactsLocationSasToken'))]",
                "[concat(parameters('_artifactsLocation'), '/', variables('scriptFolder'), '/', variables('serviceAccountScript'), parameters('_artifactsLocationSasToken'))]",
                "[concat(parameters('_artifactsLocation'), '/', variables('scriptFolder'), '/', variables('setDatabaseScript'), parameters('_artifactsLocationSasToken'))]"
              ],
              "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ', variables('mainScript'), ' -httpPort ', parameters('nsgHTTPAccess'), ' -mmmcPort ', parameters('nsgMMMCAccess'), ' -domainJoin ', parameters('adJoin'), variables('conditionalAdUsername'), variables('conditionalAdPassword'), variables('conditionalAdSvcAccount'), variables('conditionalAdSvcPassword'), ' -databaseServer ', variables('menandmice-azuresqlName'), ' -databaseInstance ', parameters('sqlDatabaseName'), ' -databaseUsername ', parameters('sqlServerAdminUsername'), ' -databasePassword ', parameters('sqlServerAdminPassword'))]"
            }
          }
        }
      ]
    },
    {
      "name": "[variables('menandmice-azuresqlName')]",
      "type": "Microsoft.Sql/servers",
      "location": "[resourceGroup().location]",
      "apiVersion": "2014-04-01-preview",
      "dependsOn": [ ],
      "tags": {
        "displayName": "menandmice-azuresqlserver"
      },
      "properties": {
        "administratorLogin": "[parameters('sqlServerAdminUsername')]",
        "administratorLoginPassword": "[parameters('sqlServerAdminPassword')]"
      },
      "resources": [
        {
          "name": "AllowAllWindowsAzureIps",
          "type": "firewallrules",
          "location": "[resourceGroup().location]",
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('menandmice-azuresqlName'))]"
          ],
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
          }
        },
        {
          "name": "[parameters('sqlDatabaseName')]",
          "type": "databases",
          "location": "[resourceGroup().location]",
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('menandmice-azuresqlName'))]"
          ],
          "tags": {
            "displayName": "menandmice-azuresqldatabase"
          },
          "properties": {
            "collation": "[variables('sqlDatabaseCollation')]",
            "edition": "[parameters('sqlDatabaseEdition')]",
            "maxSizeBytes": "1073741824",
            "requestedServiceObjectiveName": "[variables('sqlDatabaseRequestedService')]"
          }
        }
      ]
    }
  ],
  "outputs": {
    "hostname": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressName')).dnsSettings.fqdn]"
    }
  }
}
